// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -package=server -destination=mock_test.go -typed=true
//

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	models "github.com/pirellik/sequence-api/internal/db/models"
	gomock "go.uber.org/mock/gomock"
)

// MockSequenceService is a mock of SequenceService interface.
type MockSequenceService struct {
	ctrl     *gomock.Controller
	recorder *MockSequenceServiceMockRecorder
	isgomock struct{}
}

// MockSequenceServiceMockRecorder is the mock recorder for MockSequenceService.
type MockSequenceServiceMockRecorder struct {
	mock *MockSequenceService
}

// NewMockSequenceService creates a new mock instance.
func NewMockSequenceService(ctrl *gomock.Controller) *MockSequenceService {
	mock := &MockSequenceService{ctrl: ctrl}
	mock.recorder = &MockSequenceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSequenceService) EXPECT() *MockSequenceServiceMockRecorder {
	return m.recorder
}

// CreateSequence mocks base method.
func (m *MockSequenceService) CreateSequence(ctx context.Context, sequence *models.Sequence, steps []*models.SequenceStep) (*models.Sequence, []*models.SequenceStep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSequence", ctx, sequence, steps)
	ret0, _ := ret[0].(*models.Sequence)
	ret1, _ := ret[1].([]*models.SequenceStep)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSequence indicates an expected call of CreateSequence.
func (mr *MockSequenceServiceMockRecorder) CreateSequence(ctx, sequence, steps any) *MockSequenceServiceCreateSequenceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSequence", reflect.TypeOf((*MockSequenceService)(nil).CreateSequence), ctx, sequence, steps)
	return &MockSequenceServiceCreateSequenceCall{Call: call}
}

// MockSequenceServiceCreateSequenceCall wrap *gomock.Call
type MockSequenceServiceCreateSequenceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSequenceServiceCreateSequenceCall) Return(arg0 *models.Sequence, arg1 []*models.SequenceStep, arg2 error) *MockSequenceServiceCreateSequenceCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSequenceServiceCreateSequenceCall) Do(f func(context.Context, *models.Sequence, []*models.SequenceStep) (*models.Sequence, []*models.SequenceStep, error)) *MockSequenceServiceCreateSequenceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSequenceServiceCreateSequenceCall) DoAndReturn(f func(context.Context, *models.Sequence, []*models.SequenceStep) (*models.Sequence, []*models.SequenceStep, error)) *MockSequenceServiceCreateSequenceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteSequenceStep mocks base method.
func (m *MockSequenceService) DeleteSequenceStep(ctx context.Context, sequenceID, stepID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSequenceStep", ctx, sequenceID, stepID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSequenceStep indicates an expected call of DeleteSequenceStep.
func (mr *MockSequenceServiceMockRecorder) DeleteSequenceStep(ctx, sequenceID, stepID any) *MockSequenceServiceDeleteSequenceStepCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSequenceStep", reflect.TypeOf((*MockSequenceService)(nil).DeleteSequenceStep), ctx, sequenceID, stepID)
	return &MockSequenceServiceDeleteSequenceStepCall{Call: call}
}

// MockSequenceServiceDeleteSequenceStepCall wrap *gomock.Call
type MockSequenceServiceDeleteSequenceStepCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSequenceServiceDeleteSequenceStepCall) Return(arg0 error) *MockSequenceServiceDeleteSequenceStepCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSequenceServiceDeleteSequenceStepCall) Do(f func(context.Context, uuid.UUID, uuid.UUID) error) *MockSequenceServiceDeleteSequenceStepCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSequenceServiceDeleteSequenceStepCall) DoAndReturn(f func(context.Context, uuid.UUID, uuid.UUID) error) *MockSequenceServiceDeleteSequenceStepCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSequence mocks base method.
func (m *MockSequenceService) UpdateSequence(ctx context.Context, id uuid.UUID, openTrackingEnabled, clickTrackingEnabled *bool) (*models.Sequence, []*models.SequenceStep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSequence", ctx, id, openTrackingEnabled, clickTrackingEnabled)
	ret0, _ := ret[0].(*models.Sequence)
	ret1, _ := ret[1].([]*models.SequenceStep)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateSequence indicates an expected call of UpdateSequence.
func (mr *MockSequenceServiceMockRecorder) UpdateSequence(ctx, id, openTrackingEnabled, clickTrackingEnabled any) *MockSequenceServiceUpdateSequenceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSequence", reflect.TypeOf((*MockSequenceService)(nil).UpdateSequence), ctx, id, openTrackingEnabled, clickTrackingEnabled)
	return &MockSequenceServiceUpdateSequenceCall{Call: call}
}

// MockSequenceServiceUpdateSequenceCall wrap *gomock.Call
type MockSequenceServiceUpdateSequenceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSequenceServiceUpdateSequenceCall) Return(arg0 *models.Sequence, arg1 []*models.SequenceStep, arg2 error) *MockSequenceServiceUpdateSequenceCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSequenceServiceUpdateSequenceCall) Do(f func(context.Context, uuid.UUID, *bool, *bool) (*models.Sequence, []*models.SequenceStep, error)) *MockSequenceServiceUpdateSequenceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSequenceServiceUpdateSequenceCall) DoAndReturn(f func(context.Context, uuid.UUID, *bool, *bool) (*models.Sequence, []*models.SequenceStep, error)) *MockSequenceServiceUpdateSequenceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSequenceStep mocks base method.
func (m *MockSequenceService) UpdateSequenceStep(ctx context.Context, sequenceID, stepID uuid.UUID, emailSubject, emailContent *string) (*models.SequenceStep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSequenceStep", ctx, sequenceID, stepID, emailSubject, emailContent)
	ret0, _ := ret[0].(*models.SequenceStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSequenceStep indicates an expected call of UpdateSequenceStep.
func (mr *MockSequenceServiceMockRecorder) UpdateSequenceStep(ctx, sequenceID, stepID, emailSubject, emailContent any) *MockSequenceServiceUpdateSequenceStepCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSequenceStep", reflect.TypeOf((*MockSequenceService)(nil).UpdateSequenceStep), ctx, sequenceID, stepID, emailSubject, emailContent)
	return &MockSequenceServiceUpdateSequenceStepCall{Call: call}
}

// MockSequenceServiceUpdateSequenceStepCall wrap *gomock.Call
type MockSequenceServiceUpdateSequenceStepCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSequenceServiceUpdateSequenceStepCall) Return(arg0 *models.SequenceStep, arg1 error) *MockSequenceServiceUpdateSequenceStepCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSequenceServiceUpdateSequenceStepCall) Do(f func(context.Context, uuid.UUID, uuid.UUID, *string, *string) (*models.SequenceStep, error)) *MockSequenceServiceUpdateSequenceStepCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSequenceServiceUpdateSequenceStepCall) DoAndReturn(f func(context.Context, uuid.UUID, uuid.UUID, *string, *string) (*models.SequenceStep, error)) *MockSequenceServiceUpdateSequenceStepCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
