//go:build go1.22

// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`

	// Status HTTP status code
	Status int64 `json:"status"`
}

// Sequence defines model for Sequence.
type Sequence struct {
	ClickTrackingEnabled bool               `json:"clickTrackingEnabled"`
	CreatedAt            *time.Time         `json:"createdAt,omitempty"`
	Id                   openapi_types.UUID `json:"id"`
	Name                 string             `json:"name"`
	OpenTrackingEnabled  bool               `json:"openTrackingEnabled"`
	Steps                []SequenceStep     `json:"steps"`
	UpdatedAt            *time.Time         `json:"updatedAt,omitempty"`
}

// SequenceStep defines model for SequenceStep.
type SequenceStep struct {
	CreatedAt             *time.Time         `json:"createdAt,omitempty"`
	DaysAfterPreviousStep int                `json:"daysAfterPreviousStep"`
	EmailContent          string             `json:"emailContent"`
	EmailSubject          string             `json:"emailSubject"`
	Id                    openapi_types.UUID `json:"id"`
	UpdatedAt             *time.Time         `json:"updatedAt,omitempty"`
}

// UpdateSequenceInput defines model for UpdateSequenceInput.
type UpdateSequenceInput struct {
	ClickTrackingEnabled *bool `json:"clickTrackingEnabled,omitempty"`
	OpenTrackingEnabled  *bool `json:"openTrackingEnabled,omitempty"`
}

// UpdateSequenceStepInput defines model for UpdateSequenceStepInput.
type UpdateSequenceStepInput struct {
	EmailContent *string `json:"emailContent,omitempty"`
	EmailSubject *string `json:"emailSubject,omitempty"`
}

// CreateSequenceJSONRequestBody defines body for CreateSequence for application/json ContentType.
type CreateSequenceJSONRequestBody = Sequence

// UpdateSequenceJSONRequestBody defines body for UpdateSequence for application/json ContentType.
type UpdateSequenceJSONRequestBody = UpdateSequenceInput

// UpdateSequenceStepJSONRequestBody defines body for UpdateSequenceStep for application/json ContentType.
type UpdateSequenceStepJSONRequestBody = UpdateSequenceStepInput

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateSequenceWithBody request with any body
	CreateSequenceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSequence(ctx context.Context, body CreateSequenceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSequenceWithBody request with any body
	UpdateSequenceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSequence(ctx context.Context, id string, body UpdateSequenceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSequenceStep request
	DeleteSequenceStep(ctx context.Context, sequenceId string, stepId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSequenceStepWithBody request with any body
	UpdateSequenceStepWithBody(ctx context.Context, sequenceId string, stepId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSequenceStep(ctx context.Context, sequenceId string, stepId string, body UpdateSequenceStepJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateSequenceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSequenceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSequence(ctx context.Context, body CreateSequenceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSequenceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSequenceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSequenceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSequence(ctx context.Context, id string, body UpdateSequenceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSequenceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSequenceStep(ctx context.Context, sequenceId string, stepId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSequenceStepRequest(c.Server, sequenceId, stepId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSequenceStepWithBody(ctx context.Context, sequenceId string, stepId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSequenceStepRequestWithBody(c.Server, sequenceId, stepId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSequenceStep(ctx context.Context, sequenceId string, stepId string, body UpdateSequenceStepJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSequenceStepRequest(c.Server, sequenceId, stepId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateSequenceRequest calls the generic CreateSequence builder with application/json body
func NewCreateSequenceRequest(server string, body CreateSequenceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSequenceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSequenceRequestWithBody generates requests for CreateSequence with any type of body
func NewCreateSequenceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sequences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateSequenceRequest calls the generic UpdateSequence builder with application/json body
func NewUpdateSequenceRequest(server string, id string, body UpdateSequenceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSequenceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateSequenceRequestWithBody generates requests for UpdateSequence with any type of body
func NewUpdateSequenceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sequences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSequenceStepRequest generates requests for DeleteSequenceStep
func NewDeleteSequenceStepRequest(server string, sequenceId string, stepId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sequence_id", runtime.ParamLocationPath, sequenceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "step_id", runtime.ParamLocationPath, stepId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sequences/%s/steps/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSequenceStepRequest calls the generic UpdateSequenceStep builder with application/json body
func NewUpdateSequenceStepRequest(server string, sequenceId string, stepId string, body UpdateSequenceStepJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSequenceStepRequestWithBody(server, sequenceId, stepId, "application/json", bodyReader)
}

// NewUpdateSequenceStepRequestWithBody generates requests for UpdateSequenceStep with any type of body
func NewUpdateSequenceStepRequestWithBody(server string, sequenceId string, stepId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sequence_id", runtime.ParamLocationPath, sequenceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "step_id", runtime.ParamLocationPath, stepId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sequences/%s/steps/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateSequenceWithBodyWithResponse request with any body
	CreateSequenceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSequenceResponse, error)

	CreateSequenceWithResponse(ctx context.Context, body CreateSequenceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSequenceResponse, error)

	// UpdateSequenceWithBodyWithResponse request with any body
	UpdateSequenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSequenceResponse, error)

	UpdateSequenceWithResponse(ctx context.Context, id string, body UpdateSequenceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSequenceResponse, error)

	// DeleteSequenceStepWithResponse request
	DeleteSequenceStepWithResponse(ctx context.Context, sequenceId string, stepId string, reqEditors ...RequestEditorFn) (*DeleteSequenceStepResponse, error)

	// UpdateSequenceStepWithBodyWithResponse request with any body
	UpdateSequenceStepWithBodyWithResponse(ctx context.Context, sequenceId string, stepId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSequenceStepResponse, error)

	UpdateSequenceStepWithResponse(ctx context.Context, sequenceId string, stepId string, body UpdateSequenceStepJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSequenceStepResponse, error)
}

type CreateSequenceResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *Sequence
	ApplicationproblemJSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r CreateSequenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSequenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSequenceResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Sequence
	ApplicationproblemJSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r UpdateSequenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSequenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSequenceStepResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r DeleteSequenceStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSequenceStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSequenceStepResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SequenceStep
	ApplicationproblemJSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r UpdateSequenceStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSequenceStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateSequenceWithBodyWithResponse request with arbitrary body returning *CreateSequenceResponse
func (c *ClientWithResponses) CreateSequenceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSequenceResponse, error) {
	rsp, err := c.CreateSequenceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSequenceResponse(rsp)
}

func (c *ClientWithResponses) CreateSequenceWithResponse(ctx context.Context, body CreateSequenceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSequenceResponse, error) {
	rsp, err := c.CreateSequence(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSequenceResponse(rsp)
}

// UpdateSequenceWithBodyWithResponse request with arbitrary body returning *UpdateSequenceResponse
func (c *ClientWithResponses) UpdateSequenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSequenceResponse, error) {
	rsp, err := c.UpdateSequenceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSequenceResponse(rsp)
}

func (c *ClientWithResponses) UpdateSequenceWithResponse(ctx context.Context, id string, body UpdateSequenceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSequenceResponse, error) {
	rsp, err := c.UpdateSequence(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSequenceResponse(rsp)
}

// DeleteSequenceStepWithResponse request returning *DeleteSequenceStepResponse
func (c *ClientWithResponses) DeleteSequenceStepWithResponse(ctx context.Context, sequenceId string, stepId string, reqEditors ...RequestEditorFn) (*DeleteSequenceStepResponse, error) {
	rsp, err := c.DeleteSequenceStep(ctx, sequenceId, stepId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSequenceStepResponse(rsp)
}

// UpdateSequenceStepWithBodyWithResponse request with arbitrary body returning *UpdateSequenceStepResponse
func (c *ClientWithResponses) UpdateSequenceStepWithBodyWithResponse(ctx context.Context, sequenceId string, stepId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSequenceStepResponse, error) {
	rsp, err := c.UpdateSequenceStepWithBody(ctx, sequenceId, stepId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSequenceStepResponse(rsp)
}

func (c *ClientWithResponses) UpdateSequenceStepWithResponse(ctx context.Context, sequenceId string, stepId string, body UpdateSequenceStepJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSequenceStepResponse, error) {
	rsp, err := c.UpdateSequenceStep(ctx, sequenceId, stepId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSequenceStepResponse(rsp)
}

// ParseCreateSequenceResponse parses an HTTP response from a CreateSequenceWithResponse call
func ParseCreateSequenceResponse(rsp *http.Response) (*CreateSequenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSequenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Sequence
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateSequenceResponse parses an HTTP response from a UpdateSequenceWithResponse call
func ParseUpdateSequenceResponse(rsp *http.Response) (*UpdateSequenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSequenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Sequence
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteSequenceStepResponse parses an HTTP response from a DeleteSequenceStepWithResponse call
func ParseDeleteSequenceStepResponse(rsp *http.Response) (*DeleteSequenceStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSequenceStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateSequenceStepResponse parses an HTTP response from a UpdateSequenceStepWithResponse call
func ParseUpdateSequenceStepResponse(rsp *http.Response) (*UpdateSequenceStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSequenceStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SequenceStep
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create sequence
	// (POST /v1/sequences)
	CreateSequence(w http.ResponseWriter, r *http.Request)
	// Update sequence
	// (PUT /v1/sequences/{id})
	UpdateSequence(w http.ResponseWriter, r *http.Request, id string)
	// Delete sequence step
	// (DELETE /v1/sequences/{sequence_id}/steps/{step_id})
	DeleteSequenceStep(w http.ResponseWriter, r *http.Request, sequenceId string, stepId string)
	// Update sequence step
	// (PUT /v1/sequences/{sequence_id}/steps/{step_id})
	UpdateSequenceStep(w http.ResponseWriter, r *http.Request, sequenceId string, stepId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateSequence operation middleware
func (siw *ServerInterfaceWrapper) CreateSequence(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSequence(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateSequence operation middleware
func (siw *ServerInterfaceWrapper) UpdateSequence(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSequence(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSequenceStep operation middleware
func (siw *ServerInterfaceWrapper) DeleteSequenceStep(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "sequence_id" -------------
	var sequenceId string

	err = runtime.BindStyledParameterWithOptions("simple", "sequence_id", r.PathValue("sequence_id"), &sequenceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sequence_id", Err: err})
		return
	}

	// ------------- Path parameter "step_id" -------------
	var stepId string

	err = runtime.BindStyledParameterWithOptions("simple", "step_id", r.PathValue("step_id"), &stepId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "step_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSequenceStep(w, r, sequenceId, stepId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateSequenceStep operation middleware
func (siw *ServerInterfaceWrapper) UpdateSequenceStep(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "sequence_id" -------------
	var sequenceId string

	err = runtime.BindStyledParameterWithOptions("simple", "sequence_id", r.PathValue("sequence_id"), &sequenceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sequence_id", Err: err})
		return
	}

	// ------------- Path parameter "step_id" -------------
	var stepId string

	err = runtime.BindStyledParameterWithOptions("simple", "step_id", r.PathValue("step_id"), &stepId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "step_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSequenceStep(w, r, sequenceId, stepId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/v1/sequences", wrapper.CreateSequence)
	m.HandleFunc("PUT "+options.BaseURL+"/v1/sequences/{id}", wrapper.UpdateSequence)
	m.HandleFunc("DELETE "+options.BaseURL+"/v1/sequences/{sequence_id}/steps/{step_id}", wrapper.DeleteSequenceStep)
	m.HandleFunc("PUT "+options.BaseURL+"/v1/sequences/{sequence_id}/steps/{step_id}", wrapper.UpdateSequenceStep)

	return m
}

type CreateSequenceRequestObject struct {
	Body *CreateSequenceJSONRequestBody
}

type CreateSequenceResponseObject interface {
	VisitCreateSequenceResponse(w http.ResponseWriter) error
}

type CreateSequence201JSONResponse Sequence

func (response CreateSequence201JSONResponse) VisitCreateSequenceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateSequencedefaultApplicationProblemPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateSequencedefaultApplicationProblemPlusJSONResponse) VisitCreateSequenceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateSequenceRequestObject struct {
	Id   string `json:"id"`
	Body *UpdateSequenceJSONRequestBody
}

type UpdateSequenceResponseObject interface {
	VisitUpdateSequenceResponse(w http.ResponseWriter) error
}

type UpdateSequence200JSONResponse Sequence

func (response UpdateSequence200JSONResponse) VisitUpdateSequenceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSequencedefaultApplicationProblemPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateSequencedefaultApplicationProblemPlusJSONResponse) VisitUpdateSequenceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteSequenceStepRequestObject struct {
	SequenceId string `json:"sequence_id"`
	StepId     string `json:"step_id"`
}

type DeleteSequenceStepResponseObject interface {
	VisitDeleteSequenceStepResponse(w http.ResponseWriter) error
}

type DeleteSequenceStep204Response struct {
}

func (response DeleteSequenceStep204Response) VisitDeleteSequenceStepResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSequenceStepdefaultApplicationProblemPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteSequenceStepdefaultApplicationProblemPlusJSONResponse) VisitDeleteSequenceStepResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateSequenceStepRequestObject struct {
	SequenceId string `json:"sequence_id"`
	StepId     string `json:"step_id"`
	Body       *UpdateSequenceStepJSONRequestBody
}

type UpdateSequenceStepResponseObject interface {
	VisitUpdateSequenceStepResponse(w http.ResponseWriter) error
}

type UpdateSequenceStep200JSONResponse SequenceStep

func (response UpdateSequenceStep200JSONResponse) VisitUpdateSequenceStepResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSequenceStepdefaultApplicationProblemPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateSequenceStepdefaultApplicationProblemPlusJSONResponse) VisitUpdateSequenceStepResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create sequence
	// (POST /v1/sequences)
	CreateSequence(ctx context.Context, request CreateSequenceRequestObject) (CreateSequenceResponseObject, error)
	// Update sequence
	// (PUT /v1/sequences/{id})
	UpdateSequence(ctx context.Context, request UpdateSequenceRequestObject) (UpdateSequenceResponseObject, error)
	// Delete sequence step
	// (DELETE /v1/sequences/{sequence_id}/steps/{step_id})
	DeleteSequenceStep(ctx context.Context, request DeleteSequenceStepRequestObject) (DeleteSequenceStepResponseObject, error)
	// Update sequence step
	// (PUT /v1/sequences/{sequence_id}/steps/{step_id})
	UpdateSequenceStep(ctx context.Context, request UpdateSequenceStepRequestObject) (UpdateSequenceStepResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// CreateSequence operation middleware
func (sh *strictHandler) CreateSequence(w http.ResponseWriter, r *http.Request) {
	var request CreateSequenceRequestObject

	var body CreateSequenceJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSequence(ctx, request.(CreateSequenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSequence")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateSequenceResponseObject); ok {
		if err := validResponse.VisitCreateSequenceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSequence operation middleware
func (sh *strictHandler) UpdateSequence(w http.ResponseWriter, r *http.Request, id string) {
	var request UpdateSequenceRequestObject

	request.Id = id

	var body UpdateSequenceJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSequence(ctx, request.(UpdateSequenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSequence")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateSequenceResponseObject); ok {
		if err := validResponse.VisitUpdateSequenceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSequenceStep operation middleware
func (sh *strictHandler) DeleteSequenceStep(w http.ResponseWriter, r *http.Request, sequenceId string, stepId string) {
	var request DeleteSequenceStepRequestObject

	request.SequenceId = sequenceId
	request.StepId = stepId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSequenceStep(ctx, request.(DeleteSequenceStepRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSequenceStep")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteSequenceStepResponseObject); ok {
		if err := validResponse.VisitDeleteSequenceStepResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSequenceStep operation middleware
func (sh *strictHandler) UpdateSequenceStep(w http.ResponseWriter, r *http.Request, sequenceId string, stepId string) {
	var request UpdateSequenceStepRequestObject

	request.SequenceId = sequenceId
	request.StepId = stepId

	var body UpdateSequenceStepJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSequenceStep(ctx, request.(UpdateSequenceStepRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSequenceStep")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateSequenceStepResponseObject); ok {
		if err := validResponse.VisitUpdateSequenceStepResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
